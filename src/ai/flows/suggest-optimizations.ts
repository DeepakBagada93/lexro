// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI-powered image optimization suggestion flow.
 *
 * - suggestOptimalImageSettings - A function that suggests optimal image conversion and compression settings.
 * - SuggestOptimalImageSettingsInput - The input type for the suggestOptimalImageSettings function.
 * - SuggestOptimalImageSettingsOutput - The return type for the suggestOptimalImageSettings function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestOptimalImageSettingsInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of an image, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  targetUse: z.string().describe('The intended use of the image (e.g., website, print, social media).'),
});

export type SuggestOptimalImageSettingsInput = z.infer<typeof SuggestOptimalImageSettingsInputSchema>;

const SuggestOptimalImageSettingsOutputSchema = z.object({
  suggestedFormat: z.string().describe('The suggested image format (e.g., JPG, PNG, WEBP).'),
  suggestedCompressionLevel: z
    .number()
    .describe('The suggested compression level (0-100, where 0 is no compression and 100 is maximum compression).'),
  reasoning: z.string().describe('The AI reasoning behind the suggested settings.'),
});

export type SuggestOptimalImageSettingsOutput = z.infer<typeof SuggestOptimalImageSettingsOutputSchema>;

export async function suggestOptimalImageSettings(
  input: SuggestOptimalImageSettingsInput
): Promise<SuggestOptimalImageSettingsOutput> {
  return suggestOptimalImageSettingsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestOptimalImageSettingsPrompt',
  input: {schema: SuggestOptimalImageSettingsInputSchema},
  output: {schema: SuggestOptimalImageSettingsOutputSchema},
  prompt: `You are an AI expert in image optimization. Analyze the image provided and suggest the best conversion format and compression level based on its characteristics and the user's intended use.

Consider these factors:

- Image content (e.g., photos, graphics, text)
- Intended use ({{{targetUse}}})
- Desired file size
- Quality requirements

Respond with a JSON object containing the suggested format, compression level (0-100), and a brief explanation of your reasoning.

Image: {{media url=photoDataUri}}

Example:
{
  "suggestedFormat": "WEBP",
  "suggestedCompressionLevel": 75,
  "reasoning": "WEBP offers good compression and quality for web use. A compression level of 75 balances file size and visual quality."
}`,
});

const suggestOptimalImageSettingsFlow = ai.defineFlow(
  {
    name: 'suggestOptimalImageSettingsFlow',
    inputSchema: SuggestOptimalImageSettingsInputSchema,
    outputSchema: SuggestOptimalImageSettingsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
